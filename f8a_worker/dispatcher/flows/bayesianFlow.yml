---
  flow-definitions:
    - &bayesianFlow
      name: 'bayesianFlow'
      queue: '{DEPLOYMENT_PREFIX}_ingestion_bayesianFlow_v0'
      # propagate arguments to sub-flows
      propagate_node_args: true
      # propagate arguments from InitAnalysisFlow to bayesianAnalysisFlow
      node_args_from_first: true
      sampling:
        name: 'constant'
        args:
          # check for flow state each 10 seconds
          retry: 10
      edges:
        - from:
          to: 'InitAnalysisFlow'
        - from: 'InitAnalysisFlow'
          to: 'bayesianAnalysisFlow'
          condition:
            and:
              - &shouldScheduleAnalysisCheck
                # InitAnalysisFlow returns flow arguments or None if analysis was already done
                # exclude metadata we store with each task result
                name: 'fieldExist'
                args:
                  key: 'ecosystem'
              - name: 'envEqual'
                args:
                  env: 'WORKER_ADMINISTRATION_REGION'
                  value: 'ingestion'
        - from: 'InitAnalysisFlow'
          to: 'bayesianApiAnalysisFlow'
          condition:
            and:
              - <<: *shouldScheduleAnalysisCheck
              - name: 'envEqual'
                args:
                  env: 'WORKER_ADMINISTRATION_REGION'
                  value: 'api'
        - from: 'InitAnalysisFlow'
          to: 'GraphImporterTask'
          condition:
            and:
              - not:
                  <<: *shouldScheduleAnalysisCheck
              - name: 'argsFieldEqual'
                args:
                  key: 'force_graph_sync'
                  value: true
        - from: 'bayesianAnalysisFlow'
          to: 'FinalizeTask'
        - from: 'FinalizeTask'
          to: 'ResultCollector'
          condition:
            name: 'envEqual'
            args:
              env: 'BAYESIAN_SYNC_S3'
              value: '1'
        - from: 'FinalizeTaskError'
          to: 'ResultCollector'
          condition:
            name: 'envEqual'
            args:
              env: 'BAYESIAN_SYNC_S3'
              value: '1'
        # TODO: Fridolin - we can get rid of this duplicity once dispatcher will be able to propagate subflow failures
        - from: 'bayesianApiAnalysisFlow'
          to: 'FinalizeTask'
        - from: 'ResultCollector'
          to: 'GraphImporterTask'
      failures:
        - nodes:
            - 'bayesianAnalysisFlow'
          fallback:
            - 'FinalizeTaskError'
        # TODO: Fridolin - we can get rid of this duplicity once dispatcher will be able to propagate subflow failures
        - nodes:
            - 'bayesianApiAnalysisFlow'
          fallback:
            - 'FinalizeTaskError'

    - <<: *bayesianFlow
      name: 'bayesianApiFlow'
      queue: '{DEPLOYMENT_PREFIX}_api_bayesianFlow_v0'
