---
  flow-definitions:
    - &bayesianAnalysisFlow
      name: 'bayesianAnalysisFlow'
      queue: '{DEPLOYMENT_PREFIX}_{WORKER_ADMINISTRATION_REGION}_bayesianAnalysisFlow_v0'
      # we will not wait for recursive analyses
      nowait:
       - 'bayesianFlow'
       - 'bayesianApiFlow'
       - 'bayesianPriorityFlow'
       - 'bayesianPackageFlow'
       - 'bayesianApiPackageFlow'
       - 'bayesianPriorityPackageFlow'
      propagate_parent:
       # InitPackageFlow uses data from mercator (upstream URL)
       - 'bayesianPackageFlow'
       - 'bayesianApiPackageFlow'
       - 'bayesianPriorityPackageFlow'
      propagate_node_args:
       - 'bayesianPackageFlow'
       - 'bayesianApiPackageFlow'
       - 'bayesianPriorityPackageFlow'
      sampling:
        name: 'constant'
        args:
          retry: 15
      edges:
        - from:
          to:
            - 'security_issues'
          condition:
            or:
              - name: 'argsFieldEqual'
                args:
                  key: 'ecosystem'
                  value: 'maven'
              - name: 'argsFieldEqual'
                args:
                  key: 'ecosystem'
                  value: 'pypi'
              - name: 'argsFieldEqual'
                args:
                  key: 'ecosystem'
                  value: 'npm'
        - from:
          to:
            - 'source_licenses'
          condition:
            not:
              name: 'argsFieldEqual'
              args:
                key: 'ecosystem_backend'
                value: 'nuget'
        - from:
          to:
            - 'metadata'
        - from:
          to:
            - 'digests'
        - from: 'metadata'
          to: 'keywords_tagging'
          condition:
            name: 'alwaysFalse'
        - from: 'metadata'
          to: 'bayesianPriorityPackageFlow'
          condition: &priorityAnalysisCheck
            name: 'envEqual'
            args:
              env: 'WORKER_ADMINISTRATION_REGION'
              value: 'priority'
        - from: 'metadata'
          to: 'bayesianPackageFlow'
          condition:
            name: 'envEqual'
            args:
              env: 'WORKER_ADMINISTRATION_REGION'
              value: 'ingestion'
        - from: 'metadata'
          to: 'bayesianApiPackageFlow'
          condition:
            name: 'envEqual'
            args:
              env: 'WORKER_ADMINISTRATION_REGION'
              value: 'api'
        - from: 'metadata'
          to: 'dependency_snapshot'
          condition:
            name: 'argsFieldGreater'
            args:
              key: 'recursive_limit'
              value: 0
        - from: 'dependency_snapshot'
          to: 'bayesianFlow'
          foreach:
            import: 'f8a_worker.dispatcher.foreach'
            function: 'iter_dependencies_analysis'
            # result of the function is used as sub-flow arguments
            propagate_result: true
          condition:
            and:
              - &recursiveAnalysisCheck
                or:
                - not:
                    name: 'argsFieldExist'
                    args:
                      key: 'recursive_limit'
                - name: 'argsFieldGreater'
                  args:
                     key: 'recursive_limit'
                     value: 0
              - name: 'envEqual'
                args:
                  env: 'WORKER_ADMINISTRATION_REGION'
                  value: 'ingestion'
        - from: 'dependency_snapshot'
          to: 'bayesianApiFlow'
          foreach:
            import: 'f8a_worker.dispatcher.foreach'
            function: 'iter_dependencies_analysis'
            # result of the function is used as sub-flow arguments
            propagate_result: true
          condition:
            and:
              - <<: *recursiveAnalysisCheck
              - name: 'envEqual'
                args:
                  env: 'WORKER_ADMINISTRATION_REGION'
                  value: 'api'
        - from: 'dependency_snapshot'
          to: 'bayesianPriorityFlow'
          foreach:
            import: 'f8a_worker.dispatcher.foreach'
            function: 'iter_dependencies_analysis'
            # result of the function is used as sub-flow arguments
            propagate_result: true
          condition:
            and:
              - <<: *recursiveAnalysisCheck
              - <<: *priorityAnalysisCheck
